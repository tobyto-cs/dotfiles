#!/usr/bin/python3

import os
import sys
from time import sleep
import subprocess

_OUTPUT = os.getenv("output")
OUTPUT = _OUTPUT if _OUTPUT else "{gpu_format} {temp_format} {mem_format}"

_GPU_FORMAT = os.getenv("gpu_format")
GPU_FORMAT = _GPU_FORMAT if _GPU_FORMAT else "GPU: {usage: >2.0f}%"

_TEMP_FORMAT = os.getenv("temp_format")
TEMP_FORMAT = _TEMP_FORMAT if _TEMP_FORMAT else "{temp}C"

_MEM_FORMAT = os.getenv("mem_format")
MEM_FORMAT = _MEM_FORMAT if _MEM_FORMAT else "GPU_MEM: {usage: >2.0f}%"


_DELAY = os.getenv("delay")
READ_IDLE = float(_DELAY) if _DELAY and _DELAY.isdigit() else 1.0

_UNIT = os.getenv("unit")
UNIT = _UNIT.upper() if _UNIT else "GB"

_INTERVAL = os.getenv("interval")
PERSIST = _INTERVAL == "persist"

_TTMED = os.getenv("temp_threshold_med")
_TTHIGH = os.getenv("temp_threshold_high")
TEMP_THRESHOLD_MED = int(_TTMED) if _TTMED and _TTMED.isdigit() else 65
TEMP_THRESHOLD_HIGH = int(_TTHIGH) if _TTHIGH and _TTHIGH.isdigit() else 80

_MTMED = os.getenv("mem_threshold_med")
_MTHIGH = os.getenv("mem_threshold_high")
MEM_THRESHOLD_MED = int(_MTMED) if _MTMED and _MTMED.isdigit() else 65
MEM_THRESHOLD_HIGH = int(_MTHIGH) if _MTHIGH and _MTHIGH.isdigit() else 80

_TMED = os.getenv("threshold_med")
_THIGH = os.getenv("threshold_high")
THRESHOLD_MED = int(_TMED) if _TMED and _TMED.isdigit() else 60
THRESHOLD_HIGH = int(_THIGH) if _THIGH and _THIGH.isdigit() else 80

_MED_COLOR = os.getenv("med_color")
_HIGH_COLOR = os.getenv("high_color")
MED_COLOR = _MED_COLOR if _MED_COLOR and _MED_COLOR.startswith("#") and _MED_COLOR[1:].isdigit() else "#EED202"
HIGH_COLOR = _HIGH_COLOR if _HIGH_COLOR and _HIGH_COLOR.startswith("#") and _HIGH_COLOR[1:].isdigit() else "#D9004C"

_GPU_ICON = os.getenv("gpu_icon")
_GPU_ICON_MED = os.getenv("gpu_icon_med")
_GPU_ICON_HIGH = os.getenv("gpu_icon_high")
GPU_ICON = _GPU_ICON if _GPU_ICON else None
GPU_ICON_MED = _GPU_ICON_MED if _GPU_ICON_MED else GPU_ICON
GPU_ICON_HIGH = _GPU_ICON_HIGH if _GPU_ICON_HIGH else GPU_ICON_MED

_TEMP_ICON = os.getenv("temp_icon")
_TEMP_ICON_MED = os.getenv("temp_icon_med")
_TEMP_ICON_HIGH = os.getenv("temp_icon_high")
TEMP_ICON = _TEMP_ICON if _TEMP_ICON else None
TEMP_ICON_MED = _TEMP_ICON_MED if _TEMP_ICON_MED else TEMP_ICON
TEMP_ICON_HIGH = _TEMP_ICON_HIGH if _TEMP_ICON_HIGH else TEMP_ICON_MED

_MEM_ICON = os.getenv("mem_icon")
_MEM_ICON_MED = os.getenv("mem_icon_med")
_MEM_ICON_HIGH = os.getenv("mem_icon_high")
MEM_ICON = _MEM_ICON if _MEM_ICON else None
MEM_ICON_MED = _MEM_ICON_MED if _MEM_ICON_MED else MEM_ICON
MEM_ICON_HIGH = _MEM_ICON_HIGH if _MEM_ICON_HIGH else MEM_ICON_MED

USAGE     = 0
MEM_USAGE = 1
MEM_TOTAL = 2
MEM_USED  = 3
TEMP      = 4

NUM_ENTRIES = 5

def read_gpu():
    gpu = [None] * NUM_ENTRIES
    usage = subprocess.run(['nvidia-settings', '-t', '-q', 'GPUUtilization'], stdout=subprocess.PIPE).stdout.decode('utf-8').split(", ")[:2]
    gpu[USAGE] = int(usage[0].split('=')[1])
    gpu[MEM_USAGE] = int(usage[1].split('=')[1])
    gpu[MEM_TOTAL] = convert_mb(float(subprocess.run(['nvidia-settings', '-t', '-q', 'TotalDedicatedGPUMemory'], stdout=subprocess.PIPE).stdout.decode('utf-8')))
    gpu[MEM_USED] = convert_mb(float(subprocess.run(['nvidia-settings', '-t', '-q', 'UsedDedicatedGPUMemory'], stdout=subprocess.PIPE).stdout.decode('utf-8')))
    gpu[TEMP] = int(subprocess.run(['nvidia-settings', '-t', '-q', 'GPUCoreTemp'], stdout=subprocess.PIPE).stdout.decode('utf-8'))
    return gpu


def convert_mb(x):
    if UNIT == "MB": return x

    if UNIT == "KB": return x*1024
    elif UNIT == "GB": return x/1024
    return x

def get_color(usage: float, med: float, high:float) -> str:
    if usage < med: return None
    elif usage >= med and usage < high: return MED_COLOR
    else: return HIGH_COLOR

def color_str(color, string):
    if not color: return f"<span>{string}</span>"
    return f"<span foreground=\"{color}\">{string}</span>"

def get_icon(usage: float, med: float, high: float, ilow: str, imed: str, ihigh: str) -> str:
    if not ilow: return ""
    if usage < med: return ilow
    elif usage >= med and usage < high: return imed
    else: return ihigh

def get_gpu_icon(usage: float, med: float, high:float) -> str:
    return get_icon(usage, med, high, GPU_ICON, GPU_ICON_MED, GPU_ICON_HIGH)

def get_temp_icon(usage: float, med: float, high: float) -> str:
    return get_icon(usage, med, high, TEMP_ICON, TEMP_ICON_MED, TEMP_ICON_HIGH)

def get_mem_icon(usage: float, med: float, high:float) -> str:
    return get_icon(usage, med, high, MEM_ICON, MEM_ICON_MED, MEM_ICON_HIGH)

def format_gpu(gpu):
    try:
        gpustr = color_str(get_color(gpu[USAGE], THRESHOLD_MED, THRESHOLD_HIGH),\
                        GPU_FORMAT.format(usage=gpu[USAGE], icon=get_gpu_icon(gpu[USAGE], THRESHOLD_MED, THRESHOLD_HIGH)))
        memstr = color_str(get_color(gpu[MEM_USAGE], MEM_THRESHOLD_MED, MEM_THRESHOLD_HIGH),\
                        MEM_FORMAT.format(usage=gpu[MEM_USAGE],\
                                            total=gpu[MEM_TOTAL], used=gpu[MEM_USED],\
                                            icon=get_mem_icon(gpu[MEM_USAGE], MEM_THRESHOLD_MED, MEM_THRESHOLD_HIGH)))
        tempstr = color_str(get_color(gpu[TEMP], TEMP_THRESHOLD_MED, TEMP_THRESHOLD_HIGH),\
                            TEMP_FORMAT.format(temp=gpu[TEMP], icon=get_temp_icon(gpu[TEMP], TEMP_THRESHOLD_MED, TEMP_THRESHOLD_HIGH)))
        return OUTPUT.format(gpu_format=gpustr, mem_format=memstr, temp_format=tempstr)
    except Exception as e:
        return f"<span foreground=\"{HIGH_COLOR}\">Invalid format: {e}</span>"

def print_gpu_loop():
    while True:
        print(format_gpu(read_gpu()))
        sys.stdout.flush()
        sleep(READ_IDLE)

if __name__ == "__main__":
    if not PERSIST: print(format_gpu(read_gpu()))
    else: print_gpu_loop()
